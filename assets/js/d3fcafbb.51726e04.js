"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[6640],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),f=a,m=u["".concat(c,".").concat(f)]||u[f]||d[f]||i;return n?r.createElement(m,o(o({ref:t},p),{},{components:n})):r.createElement(m,o({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5789:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return u}});var r=n(2122),a=n(9756),i=(n(7294),n(3905)),o=["components"],s={},c="Unforgeable Reference (URef)",l={unversionedId:"design/uref",id:"design/uref",isDocsHomePage:!1,title:"Unforgeable Reference (URef)",description:"uref-head}",source:"@site/source/docs/casper/design/uref.md",sourceDirName:"design",slug:"/design/uref",permalink:"/docs/design/uref",editUrl:"https://github.com/casper-network/documentation/tree/master/docs/casper/design/uref.md",tags:[],version:"current",frontMatter:{},sidebar:"design",previous:{title:"Block Structure",permalink:"/docs/design/block-structure"},next:{title:"Serialization Standard",permalink:"/docs/design/serialization-standard"}},p=[{value:"Permissions for <code>URef</code>s",id:"uref-permissions",children:[]}],d={toc:p};function u(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"uref-head"},"Unforgeable Reference (URef)"),(0,i.kt)("p",null,"This key type is used for storing any type of value except ",(0,i.kt)("inlineCode",{parentName:"p"},"Account"),". Additionally, ",(0,i.kt)("inlineCode",{parentName:"p"},"URef"),"s used in contracts carry permission information to prevent unauthorized usage of the value stored under the key. This permission information is tracked by the runtime, meaning that if a malicious contract attempts to produce a ",(0,i.kt)("inlineCode",{parentName:"p"},"URef"),' with permissions that the contract does not have, we say the contract has attempted to "forge" the unforgeable reference, and the runtime will raise a forged ',(0,i.kt)("inlineCode",{parentName:"p"},"URef")," error. Permissions for a ",(0,i.kt)("inlineCode",{parentName:"p"},"URef")," can be given across contract calls, allowing data stored under a ",(0,i.kt)("inlineCode",{parentName:"p"},"URef")," to be shared in a controlled way. The 32-byte identifier representing the key is generated randomly by the runtime (see ",(0,i.kt)("a",{parentName:"p",href:"/docs/design/execution-semantics"},"Execution Semantics")," for more information). The serialization for ",(0,i.kt)("inlineCode",{parentName:"p"},"Access Rights")," that define the permissions for ",(0,i.kt)("inlineCode",{parentName:"p"},"URefs")," is detailed in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/design/serialization-standard"},"CLValues")," section."),(0,i.kt)("h2",{id:"uref-permissions"},"Permissions for ",(0,i.kt)("inlineCode",{parentName:"h2"},"URef"),"s"),(0,i.kt)("p",null,"In the runtime, a ",(0,i.kt)("inlineCode",{parentName:"p"},"URef")," carries its permissions called ",(0,i.kt)("inlineCode",{parentName:"p"},"AccessRights"),". Additionally, the runtime tracks what ",(0,i.kt)("inlineCode",{parentName:"p"},"AccessRights")," would be valid for each ",(0,i.kt)("inlineCode",{parentName:"p"},"URef")," to have in each context. As mentioned above, if a malicious contract attempts to use a ",(0,i.kt)("inlineCode",{parentName:"p"},"URef")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"AccessRights")," that are not valid in its context, then the runtime will raise an error; this is what enforces the security properties of all URefs used as a key. By default, in all contexts, all ",(0,i.kt)("inlineCode",{parentName:"p"},"URef"),"s are assumed invalid regardless of declared AccessRights and are checked against the executing context for validity upon each attempted usage in session or smart contract logic. A ",(0,i.kt)("inlineCode",{parentName:"p"},"URef")," can only be added to a context by the host logic, in the following ways:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'it can exist in a set of "known" ',(0,i.kt)("inlineCode",{parentName:"li"},"URef"),"s"),(0,i.kt)("li",{parentName:"ul"},"it can be freshly created by the runtime via the ",(0,i.kt)("inlineCode",{parentName:"li"},"new_uref")," function"),(0,i.kt)("li",{parentName:"ul"},"for called contracts, it can be passed in by the caller via the arguments to ",(0,i.kt)("inlineCode",{parentName:"li"},"call_contract")),(0,i.kt)("li",{parentName:"ul"},"it can be returned to the caller from ",(0,i.kt)("inlineCode",{parentName:"li"},"call_contract")," via the ",(0,i.kt)("inlineCode",{parentName:"li"},"ret")," function")),(0,i.kt)("p",null,"Note: that only valid ",(0,i.kt)("inlineCode",{parentName:"p"},"URef"),"s may be added to the known ",(0,i.kt)("inlineCode",{parentName:"p"},"URef"),"s or cross call boundaries; this means the system cannot be tricked into accepting a forged ",(0,i.kt)("inlineCode",{parentName:"p"},"URef")," by getting it through a contract or stashing it in the known ",(0,i.kt)("inlineCode",{parentName:"p"},"URef"),"s."),(0,i.kt)("p",null,"The ability to pass ",(0,i.kt)("inlineCode",{parentName:"p"},"URef"),"s between contexts via ",(0,i.kt)("inlineCode",{parentName:"p"},"call_contract")," / ",(0,i.kt)("inlineCode",{parentName:"p"},"ret"),", allows them to be used to share state among a fixed number of parties while keeping it private from all others."))}u.isMDXComponent=!0}}]);